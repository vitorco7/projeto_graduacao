services:
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v3.3.0
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./configs/prometheus/rules/:/etc/prometheus/rules/:ro
      - ./configs/prometheus/alertmanager/alertmanager.yml:/etc/prometheus/alertmanager/alertmanager.yml:ro
      - ./volumes/prometheus/metrics:/prometheus
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
    networks:
      - devices_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      alertmanager:
        condition: service_healthy
    # profiles: ["all"]
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/ready"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 0s

  alertmanager:
    container_name: alertmanager
    build:
      dockerfile: ${ALERTMANAGER_DOCKERFILE}
      context: .
    image: ${ALERTMANAGER_IMG}
    ports:
      - "9093:9093"
    volumes:
      - ./configs/prometheus/alertmanager/alertmanager.yml.template:/etc/alertmanager/alertmanager.yml.template:ro
      - ./volumes/alertmanager:/alertmanager
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env.secrets
    networks:
      - devices_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9093/-/ready"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s


  grafana:
    container_name: grafana
    image: grafana/grafana:11.6.0
    user: "472"
    ports:
      - "3000:3000"
    env_file:
      - .env
      - .env.secrets
    networks:
      - devices_network
    volumes:
      - ./volumes/grafana/config/:/var/lib/grafana
      - ./configs/grafana/dashboard-json:/etc/grafana/dashboards
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    # profiles: ["all"]
    depends_on:
      prometheus:
        condition: service_healthy
      # postgres:
      #   condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 90s

  # postgres:
  #   container_name: postgres
  #   image: postgres:15
  #   env_file:
  #     - .env.secrets
  #   volumes:
  #     - ./volumes/postgres/data:/var/lib/postgresql/data
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   networks:
  #     - devices_network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U grafana"]
  #     interval: 5s
  #     timeout: 3s
  #     retries: 10
  #     start_period: 0s

  virtual_device_1:
    container_name: device_1
    build:
      dockerfile: ${UBUNTU_DOCKERFILE}
      context: .
    image: ${UBUNTU_DEVICE_IMG}
    hostname: device1
    cpus: "0.6"
    mem_limit: "1024m"
    networks:
      - devices_network
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    # ports:
    #   - "9091:9273"
    # profiles: ["all", "ubuntu"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9273/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  virtual_device_2:
    container_name: device_2
    build:
      dockerfile: ${UBUNTU_DOCKERFILE}
      context: .
    image: ${UBUNTU_DEVICE_IMG}
    hostname: device2
    cpus: "0.6"
    mem_limit: "900m"
    networks:
      - devices_network
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    # ports:
    #   - "9092:9273"
    # profiles: ["all", "ubuntu"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9273/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  virtual_device_3:
    container_name: device_3
    build:
      dockerfile: ${UBUNTU_DOCKERFILE}
      context: .
    image: ${UBUNTU_DEVICE_IMG}
    hostname: device3
    cpus: "0.7"
    mem_limit: "800m"
    networks:
      - devices_network
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    # ports:
    #   - "9093:9273"
    # profiles: ["all", "ubuntu"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9273/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  virtual_device_4:
    container_name: device_4
    build:
      dockerfile: ${ALPINE_DOCKERFILE}
      context: .
    image: ${ALPINE_DEVICE_IMG}
    hostname: device4
    cpus: "0.5"
    mem_limit: "886m"
    networks:
      - devices_network
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    # ports:
    #   - "9094:9273"
    # profiles: ["all", "alpine"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9273/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  virtual_device_5:
    container_name: device_5
    build:
      dockerfile: ${ALPINE_DOCKERFILE}
      context: .
    image: ${ALPINE_DEVICE_IMG}
    hostname: device5
    cpus: "0.6"
    mem_limit: "750m"
    networks:
      - devices_network
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    # ports:
    #   - "9095:9273"
    # profiles: ["all", "alpine"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9273/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  iperf3:
    container_name: iperf3
    image: networkstatic/iperf3
    hostname: iperf3
    command: -s
    ports:
      - "5201:5201"
    networks:
      - devices_network
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: ["CMD", "pgrep", "iperf3"]
      interval: 30s
      timeout: 10s
      retries: 3

  # chaosblade:
  #   image: chaosbladeio/chaosblade-tool:latest
  #   container_name: chaosblade
  #   privileged: true
  #   networks:
  #     - devices_network
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   stdin_open: true
  #   tty: true

  # pumba:
  #   image: gaiaadm/pumba:latest
  #   container_name: pumba
  #   command: >
  #     --log-level info netem --tc-image gaiadocker/iproute2
  #     --duration 45s
  #     loss --percent 20
  #     device_1 device_2 device_3 device_4 device_5
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #   networks:
  #     - devices_network
  #   cap_add:
  #     - NET_ADMIN
  #   depends_on:
  #     - virtual_device_1
  #     - virtual_device_2
  #     - virtual_device_3
  #     - virtual_device_4
  #     - virtual_device_5

networks:
  devices_network:
    driver: bridge