services:
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./volumes/prometheus/metrics:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=15d"
    networks:
      - devices_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    # profiles: ["all"]
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "/dev/null", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s


  grafana:
    container_name: grafana
    image: grafana/grafana
    user: "472"
    ports:
      - "3000:3000"
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    # - ${GF_PATHS_PROVISIONING}
    networks:
      - devices_network
    volumes:
      - ./volumes/grafana/config/:/var/lib/grafana
      # - ./volumes/grafana/dashboards:/var/lib/grafana/dashboards
      - ./configs/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      # - ./configs/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    # profiles: ["all"]
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 90s

  docker_metrics:
    image: wywywywy/docker_stats_exporter
    container_name: docker_metrics
    ports:
      - "9089:9487"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - devices_network
    depends_on:
      prometheus:
        condition: service_healthy
    # profiles: ["all"]
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9487/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s


  # iperf3:
  #   container_name: iperf3_server
  #   image: networkstatic/iperf3
  #   command: -s
  #   ports:
  #     - "5201:5201"
  #   networks:
  #     - devices_network

  virtual_device_1:
    container_name: device_1
    image: ${UBUNTU_DEVICE_IMG}
    build:
      dockerfile: ${UBUNTU_DOCKERFILE}
      context: .
    hostname: device1
    cpus: "0.3"
    mem_limit: "256m"
    networks:
      - devices_network
    ports:
      - "9091:9273"
    # profiles: ["all", "ubuntu"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9273/metrics"]
      interval: 20s
      timeout: 5s
      retries: 2

  virtual_device_2:
    container_name: device_2
    image: ${UBUNTU_DEVICE_IMG}
    build:
      dockerfile: ${UBUNTU_DOCKERFILE}
      context: .
    hostname: device2
    cpus: "0.3"
    mem_limit: "512m"
    networks:
      - devices_network
    ports:
      - "9092:9273"
    # profiles: ["all", "ubuntu"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9273/metrics"]
      interval: 20s
      timeout: 5s
      retries: 2

  virtual_device_3:
    container_name: device_3
    image: ${UBUNTU_DEVICE_IMG}
    build:
      dockerfile: ${UBUNTU_DOCKERFILE}
      context: .
    hostname: device3
    cpus: "0.4"
    mem_limit: "256m"
    networks:
      - devices_network
    ports:
      - "9093:9273"
    # profiles: ["all", "ubuntu"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9273/metrics"]
      interval: 20s
      timeout: 5s
      retries: 2
      
  virtual_device_4:
    container_name: device_4
    image: ${ALPINE_DEVICE_IMG}
    build:
      dockerfile: ${ALPINE_DOCKERFILE}
      context: .
    hostname: device4
    cpus: "0.3"
    mem_limit: "256m"
    networks:
      - devices_network
    ports:
      - "9094:9273"
    # profiles: ["all", "alpine"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9273/metrics"]
      interval: 20s
      timeout: 5s
      retries: 2
      
  virtual_device_5:
    container_name: device_5
    image: ${ALPINE_DEVICE_IMG}
    build:
      dockerfile: ${ALPINE_DOCKERFILE}
      context: .
    hostname: device5
    cpus: "0.3"
    mem_limit: "512m"
    networks:
      - devices_network
    ports:
      - "9095:9273"
    # profiles: ["all", "alpine"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9273/metrics"]
      interval: 20s
      timeout: 5s
      retries: 2

networks:
  devices_network:
    driver: bridge