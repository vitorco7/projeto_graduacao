# Global Agent Configuration
[agent]
  interval = "30s"
  round_interval = true
  metric_batch_size = 500  # Reduced from 1000
  metric_buffer_limit = 5000  # Reduced from 10000
  collection_jitter = "5s"  # Added jitter
  flush_interval = "30s"
  flush_jitter = "5s"  # Added jitter
  precision = ""
  debug = true  # Enable debug logging
  quiet = false
  logtarget = "stderr"
  hostname = ""
  omit_hostname = false

# Prometheus-compatible output with retry logic
[[outputs.prometheus_client]]
  listen = ":9273"
  path = "/metrics"
  expiration_interval = "120s"  # Increased from 60s
  metric_version = 2
  
# Minimal set of inputs to reduce CPU usage
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  # report_active = true

# Container memory limit (adjusted for cgroup v2)
[[inputs.exec]]
  name_override = "container_memory_limit_bytes"
  commands = ["cat /sys/fs/cgroup/memory.max"]
  data_format = "value"
  data_type = "integer"
  timeout = "5s"

# Container memory usage (adjusted for cgroup v2)
[[inputs.exec]]
  name_override = "container_memory_usage_bytes"
  commands = ["cat /sys/fs/cgroup/memory.current"]
  data_format = "value"
  data_type = "integer"
  timeout = "5s"

# [[inputs.system]]
# [[inputs.disk]]
# [[inputs.diskio]]
# [[inputs.system]]
# [[inputs.net]]

# Optional: add container-based metrics if you mount Docker socket
# [[inputs.docker]]
#   endpoint = "unix:///var/run/docker.sock"
#   gather_services = false
#   container_names = []
#   timeout = "5s"
#   perdevice = true
#   total = true

# Optional: log useful info (uncomment to enable)
# [[outputs.file]]
#   files = ["stdout"]
#   data_format = "influx"
